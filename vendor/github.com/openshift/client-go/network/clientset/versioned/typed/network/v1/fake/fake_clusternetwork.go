// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/network/v1"
	networkv1 "github.com/openshift/client-go/network/applyconfigurations/network/v1"
	typednetworkv1 "github.com/openshift/client-go/network/clientset/versioned/typed/network/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeClusterNetworks implements ClusterNetworkInterface
type fakeClusterNetworks struct {
	*gentype.FakeClientWithListAndApply[*v1.ClusterNetwork, *v1.ClusterNetworkList, *networkv1.ClusterNetworkApplyConfiguration]
	Fake *FakeNetworkV1
}

func newFakeClusterNetworks(fake *FakeNetworkV1) typednetworkv1.ClusterNetworkInterface {
	return &fakeClusterNetworks{
		gentype.NewFakeClientWithListAndApply[*v1.ClusterNetwork, *v1.ClusterNetworkList, *networkv1.ClusterNetworkApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("clusternetworks"),
			v1.SchemeGroupVersion.WithKind("ClusterNetwork"),
			func() *v1.ClusterNetwork { return &v1.ClusterNetwork{} },
			func() *v1.ClusterNetworkList { return &v1.ClusterNetworkList{} },
			func(dst, src *v1.ClusterNetworkList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ClusterNetworkList) []*v1.ClusterNetwork { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.ClusterNetworkList, items []*v1.ClusterNetwork) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
