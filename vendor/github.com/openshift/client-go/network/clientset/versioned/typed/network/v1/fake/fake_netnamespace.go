// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/network/v1"
	networkv1 "github.com/openshift/client-go/network/applyconfigurations/network/v1"
	typednetworkv1 "github.com/openshift/client-go/network/clientset/versioned/typed/network/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeNetNamespaces implements NetNamespaceInterface
type fakeNetNamespaces struct {
	*gentype.FakeClientWithListAndApply[*v1.NetNamespace, *v1.NetNamespaceList, *networkv1.NetNamespaceApplyConfiguration]
	Fake *FakeNetworkV1
}

func newFakeNetNamespaces(fake *FakeNetworkV1) typednetworkv1.NetNamespaceInterface {
	return &fakeNetNamespaces{
		gentype.NewFakeClientWithListAndApply[*v1.NetNamespace, *v1.NetNamespaceList, *networkv1.NetNamespaceApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("netnamespaces"),
			v1.SchemeGroupVersion.WithKind("NetNamespace"),
			func() *v1.NetNamespace { return &v1.NetNamespace{} },
			func() *v1.NetNamespaceList { return &v1.NetNamespaceList{} },
			func(dst, src *v1.NetNamespaceList) { dst.ListMeta = src.ListMeta },
			func(list *v1.NetNamespaceList) []*v1.NetNamespace { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.NetNamespaceList, items []*v1.NetNamespace) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
