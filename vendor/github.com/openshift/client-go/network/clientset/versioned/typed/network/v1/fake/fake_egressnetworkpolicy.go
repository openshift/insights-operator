// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/network/v1"
	networkv1 "github.com/openshift/client-go/network/applyconfigurations/network/v1"
	typednetworkv1 "github.com/openshift/client-go/network/clientset/versioned/typed/network/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeEgressNetworkPolicies implements EgressNetworkPolicyInterface
type fakeEgressNetworkPolicies struct {
	*gentype.FakeClientWithListAndApply[*v1.EgressNetworkPolicy, *v1.EgressNetworkPolicyList, *networkv1.EgressNetworkPolicyApplyConfiguration]
	Fake *FakeNetworkV1
}

func newFakeEgressNetworkPolicies(fake *FakeNetworkV1, namespace string) typednetworkv1.EgressNetworkPolicyInterface {
	return &fakeEgressNetworkPolicies{
		gentype.NewFakeClientWithListAndApply[*v1.EgressNetworkPolicy, *v1.EgressNetworkPolicyList, *networkv1.EgressNetworkPolicyApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("egressnetworkpolicies"),
			v1.SchemeGroupVersion.WithKind("EgressNetworkPolicy"),
			func() *v1.EgressNetworkPolicy { return &v1.EgressNetworkPolicy{} },
			func() *v1.EgressNetworkPolicyList { return &v1.EgressNetworkPolicyList{} },
			func(dst, src *v1.EgressNetworkPolicyList) { dst.ListMeta = src.ListMeta },
			func(list *v1.EgressNetworkPolicyList) []*v1.EgressNetworkPolicy {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.EgressNetworkPolicyList, items []*v1.EgressNetworkPolicy) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
