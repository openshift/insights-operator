// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/api/network/v1alpha1"
	networkv1alpha1 "github.com/openshift/client-go/network/applyconfigurations/network/v1alpha1"
	typednetworkv1alpha1 "github.com/openshift/client-go/network/clientset/versioned/typed/network/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeDNSNameResolvers implements DNSNameResolverInterface
type fakeDNSNameResolvers struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.DNSNameResolver, *v1alpha1.DNSNameResolverList, *networkv1alpha1.DNSNameResolverApplyConfiguration]
	Fake *FakeNetworkV1alpha1
}

func newFakeDNSNameResolvers(fake *FakeNetworkV1alpha1, namespace string) typednetworkv1alpha1.DNSNameResolverInterface {
	return &fakeDNSNameResolvers{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.DNSNameResolver, *v1alpha1.DNSNameResolverList, *networkv1alpha1.DNSNameResolverApplyConfiguration](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("dnsnameresolvers"),
			v1alpha1.SchemeGroupVersion.WithKind("DNSNameResolver"),
			func() *v1alpha1.DNSNameResolver { return &v1alpha1.DNSNameResolver{} },
			func() *v1alpha1.DNSNameResolverList { return &v1alpha1.DNSNameResolverList{} },
			func(dst, src *v1alpha1.DNSNameResolverList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.DNSNameResolverList) []*v1alpha1.DNSNameResolver {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.DNSNameResolverList, items []*v1alpha1.DNSNameResolver) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
