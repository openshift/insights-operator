// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/api/insights/v1alpha1"
	insightsv1alpha1 "github.com/openshift/client-go/insights/applyconfigurations/insights/v1alpha1"
	typedinsightsv1alpha1 "github.com/openshift/client-go/insights/clientset/versioned/typed/insights/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeDataGathers implements DataGatherInterface
type fakeDataGathers struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.DataGather, *v1alpha1.DataGatherList, *insightsv1alpha1.DataGatherApplyConfiguration]
	Fake *FakeInsightsV1alpha1
}

func newFakeDataGathers(fake *FakeInsightsV1alpha1) typedinsightsv1alpha1.DataGatherInterface {
	return &fakeDataGathers{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.DataGather, *v1alpha1.DataGatherList, *insightsv1alpha1.DataGatherApplyConfiguration](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("datagathers"),
			v1alpha1.SchemeGroupVersion.WithKind("DataGather"),
			func() *v1alpha1.DataGather { return &v1alpha1.DataGather{} },
			func() *v1alpha1.DataGatherList { return &v1alpha1.DataGatherList{} },
			func(dst, src *v1alpha1.DataGatherList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.DataGatherList) []*v1alpha1.DataGather { return gentype.ToPointerSlice(list.Items) },
			func(list *v1alpha1.DataGatherList, items []*v1alpha1.DataGather) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
